{"version":3,"sources":["components/TodoList/TodoList.tsx","api/api.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","todo","showUser","selectedUserId","className","map","id","title","completed","userId","htmlFor","type","checked","readOnly","onClick","API_URL","a","fetch","then","res","json","CurrentUser","React","memo","user","clearUser","useState","newUser","setNewUser","useEffect","getUsers","person","name","email","phone","App","state","todos","search","status","setState","value","prevState","filter","item","toLocaleLowerCase","indexOf","todoStatus","getAllTodos","this","onChange","event","target","defaultValue","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.911d033c.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\n\ninterface Props {\n  todo: Todo[],\n  showUser: (id:number) => void,\n  selectedUserId:number | null;\n}\n\nexport const TodoList: React.FC<Props> = ({ todo, showUser, selectedUserId }) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todo.map(({\n          id, title, completed, userId,\n        }) => (\n          <li\n            key={id}\n            className={`TodoList__item \n            ${completed ? 'TodoList__item--checked' : 'TodoList__item--unchecked'}\n            `}\n          >\n            <label htmlFor=\"qwe\">\n              <input type=\"checkbox\" checked={completed} readOnly />\n              <p>{title}</p>\n            </label>\n\n            <button\n              onClick={() => {\n                showUser(userId);\n              }}\n              className={`\n                TodoList__user-button\n                ${selectedUserId === userId ? 'TodoList__user-button--selected' : ''}\n                button\n              `}\n              type=\"button\"\n            >\n              User&nbsp;\n              {userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","/* eslint-disable no-console */\nconst API_URL = 'https://mate.academy/students-api';\n\n// export const getAllTodos = (): Promise<Todo[]> => {\n//   return fetch(`${API_URL}/todos`)\n//     .then(res => res.json());\n// };\n\nexport async function getAllTodos():Promise<Todo[]> {\n  return (\n    fetch(`${API_URL}/todos`)\n      .then(res => res.json())\n  );\n}\n\nexport async function getUsers(id: number):Promise<User> {\n  return (\n    fetch(`${API_URL}/users/${id}`)\n      .then(res => res.json())\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport './CurrentUser.scss';\nimport { getUsers } from '../../api/api';\n\ninterface Props {\n  user: number,\n  clearUser: () => void\n}\n\nexport const CurrentUser: React.FC<Props> = React.memo(\n  ({ user, clearUser }) => {\n    const [newUser, setNewUser] = useState<User | null>();\n\n    useEffect(() => {\n      getUsers(user)\n        .then(person => setNewUser(person));\n    }, [user]);\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {newUser?.id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{newUser?.name}</h3>\n        <p className=\"CurrentUser__email\">{newUser?.email}</p>\n        <p\n          className=\"CurrentUser__phone\"\n        >\n          {newUser?.phone}\n        </p>\n        <button\n          type=\"button\"\n          onClick={clearUser}\n        >\n          Clear user\n\n        </button>\n      </div>\n    );\n  },\n);\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getAllTodos } from './api/api';\n//\n\ninterface State {\n  todos: Todo[] | [],\n  selectedUserId: number | null;\n  search: Todo[] | [],\n  status: boolean | null,\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: null,\n    search: [],\n    status: null,\n  };\n\n  componentDidMount() {\n    getAllTodos()\n      .then((todos:Todo[]) => {\n        this.setState({ todos, search: todos });\n      });\n  }\n\n  showUser = (id:number) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  clearUser = () => {\n    this.setState({ selectedUserId: null });\n  };\n\n  search = (value:string) => {\n    if (this.state.status !== null) {\n      this.setState(prevState => (\n        {\n          search: prevState.todos.filter(item => (\n            item.title.toLocaleLowerCase().indexOf(value.toLocaleLowerCase()) > -1\n            && item.completed === prevState.status\n          )),\n        }\n      ));\n    } else {\n      this.setState(prevState => (\n        {\n          search: prevState.todos.filter(item => (\n            item.title.toLocaleLowerCase().indexOf(value.toLocaleLowerCase()) > -1\n          )),\n        }\n      ));\n    }\n  };\n\n  todoStatus = (status: string) => {\n    if (status === 'Done') {\n      this.setState(prevState => (\n        { search: prevState.todos.filter(item => item.completed), status: true }\n      ));\n    }\n\n    if (status === 'Todo') {\n      this.setState(prevState => (\n        { search: prevState.todos.filter(item => !item.completed), status: false }\n      ));\n    }\n\n    if (status === 'All') {\n      this.setState(prevState => (\n        { search: prevState.todos, status: null }\n      ));\n    }\n  };\n\n  render() {\n    const { selectedUserId, search } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <input\n            type=\"text\"\n            onChange={(event) => {\n              this.search(event?.target.value);\n            }}\n          />\n          <select\n            name=\"all\"\n            onChange={(event) => {\n              this.todoStatus(event.target.value);\n            }}\n          >\n            <option\n              defaultValue=\"all\"\n            >\n              All\n            </option>\n            <option\n              defaultValue=\"true\"\n            >\n              Done\n\n            </option>\n            <option\n              defaultValue=\"false\"\n            >\n              Todo\n            </option>\n          </select>\n\n          <TodoList\n            todo={search}\n            selectedUserId={selectedUserId}\n            showUser={(id:number) => {\n              this.showUser(id);\n            }}\n          />\n        </div>\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                user={selectedUserId}\n                clearUser={this.clearUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}